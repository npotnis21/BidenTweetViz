import bpy
import os
import csv


def get_file_path(file_name):
    '''Get filepath'''
    file_path = os.path.join(os.path.dirname(__file__), "..", file_name)
    return file_path

def read_csv(file_path):
    '''Read CSV data'''
    with open(file_path, 'r') as f:
        reader = csv.reader(f)
        data = list(reader)
    return data

def csv_column(data, col):
    '''Parse CSV data by index as array'''
    array = []
    for y, row in enumerate(data):
        if y == 0:
            continue
        array.append(row[col])
    return array

def trigger_update():
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.object.mode_set(mode='OBJECT')
    
def add_attribute(obj_name, attr_name, type="FLOAT", domain="POINT"):
    attr = bpy.data.meshes[obj_name].attributes.new(attr_name, type, domain)
    return attr

#==============================================================#
#==============================================================#
#==============================================================#


#read csv
file_name = "hashtag_joebiden.csv"

data = read_csv(get_file_path(file_name))

retweet = csv_column(data, 4)
lat = csv_column(data, 12)
long = csv_column(data, 13)

#print(retweet)



#object
obj = bpy.context.active_object

geo_nodes = obj.modifiers.new("make_vertices", "NODES")
geo_nodes.node_group = bpy.data.node_groups['make_vertices']

#set number of vertices
geo_nodes ["Input_2"] = len(retweet)

trigger_update()

#apply modifer
bpy.ops.object.modifier_apply(modifier=geo_nodes.name)


retweet_seq = []
for i in range (len(retweet)):

    tweet = retweet[i]

    try:
        if tweet == "": # this is an empty cell
            tweet = 0
        elif tweet.find("E") != -1: # the retweet count is in scientific notation
            tweet = 0
        elif tweet.find(".") != -1: # the retweet count is a float
            tweet = int(float(tweet))
        else: # the retweet count is an int
            tweet = int((tweet))

        retweet_seq.append(tweet)
    except ValueError:
        continue
        #print(f"ERROR: tweet has datatype {type(tweet)} and value {tweet} and python doesn't like it")


#store retweets as points

#attribute for retweets
attr = add_attribute(obj.name, "Retweet", "INT")

#write the csv data into the attribute
attr.data.foreach_set('value', retweet_seq)



#store coordinates (lat and long)


coordinates = []
for i in range (len(retweet)):

    corLat = lat[i]
    corLong = long[i]
    corZ = float(0)

    try:
        if corLat == "": # this is an empty cell
            corLat = float(0)
        elif corLat.find("E") != -1: # the count is in scientific notation
            corLat = float(0)
        elif corLat.find(".") != -1: # the count is a float
            corLat = float(corLat)
        else: # the count is a float
            corLat = float(0)

        coordinates.append(corLat)
    except ValueError:
        continue
        
    try:
        if corLong == "": # this is an empty cell
            corLong = float(0)
        elif corLong.find("E") != -1: # the count is in scientific notation
            corLong = float(0)
        
        elif corLong.find(".") != -1: # the count is a float
            corLong = float(corLong)
        else: # the count is a float
            corLong = float(0)

        coordinates.append(corLong)
    except ValueError:
        continue

    coordinates.append(corZ)

#print(coordinates)

#attribute for coordinates
attr = add_attribute(obj.name, "Coordinates", "FLOAT_VECTOR")

#write the csv data into the attribute
attr.data.foreach_set('vector', coordinates)